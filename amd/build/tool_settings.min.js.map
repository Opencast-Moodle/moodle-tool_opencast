{"version":3,"file":"tool_settings.min.js","sources":["../src/tool_settings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the opencast tool settings.\n *\n * @copyright  2021 Tamara Gunkel, University of MÃ¼nster\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Tabulator from 'block_opencast/tabulator';\nimport $ from 'jquery';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport * as str from 'core/str';\n\nexport const init = (instancesinputid) => {\n\n    // Load strings\n    var strings = [\n        {key: 'name', component: 'tool_opencast'},\n        {key: 'isvisible', component: 'tool_opencast'},\n        {key: 'addinstance', component: 'tool_opencast'},\n        {key: 'delete_instance', component: 'tool_opencast'},\n        {key: 'delete_instance_confirm', component: 'tool_opencast'},\n        {key: 'delete', component: 'moodle'},\n        {key: 'isdefault', component: 'tool_opencast'},\n    ];\n    str.get_strings(strings).then(function(jsstrings) {\n        // Style hidden input.\n        var instancesinput = $('#' + instancesinputid);\n\n        if (!instancesinput.length) {\n            return;\n        }\n\n        instancesinput.parent().hide();\n        instancesinput.parent().next().hide(); // Default value.\n\n        var instancestable = new Tabulator(\"#instancestable\", {\n            data: JSON.parse(instancesinput.val()),\n            layout: \"fitColumns\",\n            dataChanged: function(data) {\n                instancesinput.val(JSON.stringify(data));\n            },\n            columns: [\n                {title: 'ID', field: \"id\", widthGrow: 0},\n                {title: jsstrings[0], field: \"name\", editor: \"input\", widthGrow: 2},\n                {\n                    title: jsstrings[1],\n                    field: \"isvisible\",\n                    hozAlign: \"center\",\n                    widthGrow: 0,\n                    formatter: function(cell) {\n                        var input = document.createElement('input');\n                        input.type = 'checkbox';\n                        input.checked = cell.getValue();\n                        input.addEventListener('click', function() {\n                            cell.getRow().update({'isvisible': $(this).prop('checked') ? 1 : 0});\n                        });\n                        return input;\n                    }\n                },\n                {\n                    title: jsstrings[6],\n                    field: \"isdefault\",\n                    hozAlign: \"center\",\n                    widthGrow: 0,\n                    formatter: function(cell) {\n                        var input = document.createElement('input');\n                        input.type = 'checkbox';\n                        input.checked = cell.getValue();\n                        input.addEventListener('click', function() {\n                            cell.getRow().update({'isdefault': $(this).prop('checked') ? 1 : 0});\n                        });\n                        return input;\n                    }\n                },\n                {\n                    title: \"\",\n                    width: 40,\n                    headerSort: false,\n                    hozAlign: \"center\",\n                    formatter: function() {\n                        return '<i class=\"icon fa fa-trash fa-fw\"></i>';\n                    },\n                    cellClick: function(e, cell) {\n                        ModalFactory.create({\n                            type: ModalFactory.types.SAVE_CANCEL,\n                            title: jsstrings[3],\n                            body: jsstrings[4]\n                        })\n                            .then(function(modal) {\n                                modal.setSaveButtonText(jsstrings[5]);\n                                modal.getRoot().on(ModalEvents.save, function() {\n                                    cell.getRow().delete();\n                                });\n                                modal.show();\n                            });\n                    }\n                }\n            ],\n        });\n\n        $('#addrow-instancestable').click(function() {\n            var instances = JSON.parse(instancesinput.val());\n            var ids = instances.map(x => x.id);\n            ids.sort();\n            var nextid = 0;\n            var i;\n\n            if (ids.includes(1)) {\n                for (i = 0; i < ids.length; i++) {\n                    let nextElem = i + 1;\n                    if (nextElem === ids.length) {\n                        nextid = ids[i] + 1;\n                    } else if (ids[nextElem] !== ids[i] + 1) {\n                        nextid = ids[i] + 1;\n                        break;\n                    }\n                }\n            } else {\n                nextid = 1;\n            }\n\n            instancestable.addRow({'id': nextid, 'isvisible': false, 'isdefault': false});\n        });\n    });\n};\n\n"],"names":["instancesinputid","str","get_strings","key","component","then","jsstrings","instancesinput","length","parent","hide","next","instancestable","Tabulator","data","JSON","parse","val","layout","dataChanged","stringify","columns","title","field","widthGrow","editor","hozAlign","formatter","cell","input","document","createElement","type","checked","getValue","addEventListener","getRow","update","this","prop","width","headerSort","cellClick","e","create","ModalFactory","types","SAVE_CANCEL","body","modal","setSaveButtonText","getRoot","on","ModalEvents","save","delete","show","click","ids","map","x","id","sort","i","nextid","includes","nextElem","addRow"],"mappings":";;;;;;y7BA4BoB,SAACA,kBAYjBC,IAAIC,YATU,CACV,CAACC,IAAK,OAAQC,UAAW,iBACzB,CAACD,IAAK,YAAaC,UAAW,iBAC9B,CAACD,IAAK,cAAeC,UAAW,iBAChC,CAACD,IAAK,kBAAmBC,UAAW,iBACpC,CAACD,IAAK,0BAA2BC,UAAW,iBAC5C,CAACD,IAAK,SAAUC,UAAW,UAC3B,CAACD,IAAK,YAAaC,UAAW,mBAETC,MAAK,SAASC,eAE/BC,gBAAiB,mBAAE,IAAMP,qBAExBO,eAAeC,QAIpBD,eAAeE,SAASC,OACxBH,eAAeE,SAASE,OAAOD,WAE3BE,eAAiB,IAAIC,mBAAU,kBAAmB,CAClDC,KAAMC,KAAKC,MAAMT,eAAeU,OAChCC,OAAQ,aACRC,YAAa,SAASL,MAClBP,eAAeU,IAAIF,KAAKK,UAAUN,QAEtCO,QAAS,CACL,CAACC,MAAO,KAAMC,MAAO,KAAMC,UAAW,GACtC,CAACF,MAAOhB,UAAU,GAAIiB,MAAO,OAAQE,OAAQ,QAASD,UAAW,GACjE,CACIF,MAAOhB,UAAU,GACjBiB,MAAO,YACPG,SAAU,SACVF,UAAW,EACXG,UAAW,SAASC,UACZC,MAAQC,SAASC,cAAc,gBACnCF,MAAMG,KAAO,WACbH,MAAMI,QAAUL,KAAKM,WACrBL,MAAMM,iBAAiB,SAAS,WAC5BP,KAAKQ,SAASC,OAAO,YAAc,mBAAEC,MAAMC,KAAK,WAAa,EAAI,OAE9DV,QAGf,CACIP,MAAOhB,UAAU,GACjBiB,MAAO,YACPG,SAAU,SACVF,UAAW,EACXG,UAAW,SAASC,UACZC,MAAQC,SAASC,cAAc,gBACnCF,MAAMG,KAAO,WACbH,MAAMI,QAAUL,KAAKM,WACrBL,MAAMM,iBAAiB,SAAS,WAC5BP,KAAKQ,SAASC,OAAO,YAAc,mBAAEC,MAAMC,KAAK,WAAa,EAAI,OAE9DV,QAGf,CACIP,MAAO,GACPkB,MAAO,GACPC,YAAY,EACZf,SAAU,SACVC,UAAW,iBACA,0CAEXe,UAAW,SAASC,EAAGf,6BACNgB,OAAO,CAChBZ,KAAMa,uBAAaC,MAAMC,YACzBzB,MAAOhB,UAAU,GACjB0C,KAAM1C,UAAU,KAEfD,MAAK,SAAS4C,OACXA,MAAMC,kBAAkB5C,UAAU,IAClC2C,MAAME,UAAUC,GAAGC,sBAAYC,MAAM,WACjC1B,KAAKQ,SAASmB,YAElBN,MAAMO,mCAO5B,0BAA0BC,OAAM,eAE1BC,IADY3C,KAAKC,MAAMT,eAAeU,OACtB0C,KAAI,SAAAC,UAAKA,EAAEC,MAC/BH,IAAII,WAEAC,EADAC,OAAS,KAGTN,IAAIO,SAAS,OACRF,EAAI,EAAGA,EAAIL,IAAIlD,OAAQuD,IAAK,KACzBG,SAAWH,EAAI,KACfG,WAAaR,IAAIlD,OACjBwD,OAASN,IAAIK,GAAK,OACf,GAAIL,IAAIQ,YAAcR,IAAIK,GAAK,EAAG,CACrCC,OAASN,IAAIK,GAAK,cAK1BC,OAAS,EAGbpD,eAAeuD,OAAO,IAAOH,kBAAqB,aAAoB"}