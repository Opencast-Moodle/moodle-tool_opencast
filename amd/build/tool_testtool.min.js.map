{"version":3,"file":"tool_testtool.min.js","sources":["../src/tool_testtool.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module for opencast connection test tool\n *\n * @module     tool_opencast/tool_testtool\n * @copyright  2021 Farbod Zamani (zamani@elan-ev.de)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n        'jquery',\n        'core/ajax',\n        'core/str',\n        'core/modal_factory',\n        'core/notification'],\n    function($, Ajax, Str, ModalFactory, Notification) {\n\n        /**\n         * TestTool class.\n         */\n        var TestTool = function() {\n            this.activateButton();\n            this.registerClickEvent();\n        };\n\n        /**\n         * Register button activation.\n         */\n        TestTool.prototype.activateButton = function() {\n            $('.testtool-modal').each(function() {\n                if ($(this).is(':visible') && $(this).hasClass('disabled')) {\n                    $(this).removeAttr('disabled');\n                    $(this).removeAttr('title');\n                    $(this).removeClass('disabled btn-warning');\n                    $(this).addClass('btn-secondary');\n                }\n            });\n        };\n        /**\n         * Register event listener.\n         */\n        TestTool.prototype.registerClickEvent = function() {\n            $('.testtool-modal').click(function(e) {\n                e.preventDefault();\n                var instanceid = $(e.target).data('instanceid');\n                var suffix = (instanceid) ? '_' + instanceid : '';\n\n\n                var apiurl = $('#admin-apiurl' + suffix).find('input').val();\n                var apiusername = $('#admin-apiusername' + suffix).find('input').val();\n                var apipassword = $('#admin-apipassword' + suffix).find('input').val();\n                var apitimeout = $('#admin-apitimeout' + suffix).find('input').val();\n                var apiconnecttimeout = $('#admin-apiconnecttimeout' + suffix).find('input').val();\n\n                var args = {\n                    'apiurl': apiurl,\n                    'apiusername': apiusername,\n                    'apipassword': apipassword,\n                    'apitimeout': apitimeout,\n                    'apiconnecttimeout': apiconnecttimeout\n            };\n\n                // Get options.\n                var request = [{methodname: 'tool_opencast_connection_test_tool', args: args}];\n                var promise = Ajax.call(request);\n\n                var titlePromise = Str.get_string('testtoolurl', 'tool_opencast');\n                var modalPromise = ModalFactory.create({type: ModalFactory.types.CANCEL});\n                $.when(promise[0], titlePromise, modalPromise).then(function(connectionTestResponse, title, modal) {\n                    modal.setTitle(title);\n                    modal.setBody(connectionTestResponse.testresult);\n\n                    modal.show();\n                    return modal;\n                }).catch(Notification.exception);\n            });\n        };\n\n        return /** @alias tool_opencast/tool_testtool */ {\n\n            /**\n             * Initialise the module.\n             *\n             * @method init\n             * @return {TestTool}\n             */\n            'init': function() {\n                return new TestTool();\n            }\n        };\n    });\n"],"names":["define","$","Ajax","Str","ModalFactory","Notification","TestTool","activateButton","registerClickEvent","prototype","each","this","is","hasClass","removeAttr","removeClass","addClass","click","e","preventDefault","instanceid","target","data","suffix","request","methodname","args","find","val","promise","call","titlePromise","get_string","modalPromise","create","type","types","CANCEL","when","then","connectionTestResponse","title","modal","setTitle","setBody","testresult","show","catch","exception"],"mappings":";;;;;;;AAsBAA,qCAAO,CACC,SACA,YACA,WACA,qBACA,sBACJ,SAASC,EAAGC,KAAMC,IAAKC,aAAcC,kBAK7BC,SAAW,gBACNC,sBACAC,6BAMTF,SAASG,UAAUF,eAAiB,WAChCN,EAAE,mBAAmBS,MAAK,WAClBT,EAAEU,MAAMC,GAAG,aAAeX,EAAEU,MAAME,SAAS,cAC3CZ,EAAEU,MAAMG,WAAW,YACnBb,EAAEU,MAAMG,WAAW,SACnBb,EAAEU,MAAMI,YAAY,wBACpBd,EAAEU,MAAMK,SAAS,sBAO7BV,SAASG,UAAUD,mBAAqB,WACpCP,EAAE,mBAAmBgB,OAAM,SAASC,GAChCA,EAAEC,qBACEC,WAAanB,EAAEiB,EAAEG,QAAQC,KAAK,cAC9BC,OAAUH,WAAc,IAAMA,WAAa,GAkB3CI,QAAU,CAAC,CAACC,WAAY,qCAAsCC,KATvD,QANEzB,EAAE,gBAAkBsB,QAAQI,KAAK,SAASC,kBACrC3B,EAAE,qBAAuBsB,QAAQI,KAAK,SAASC,kBAC/C3B,EAAE,qBAAuBsB,QAAQI,KAAK,SAASC,iBAChD3B,EAAE,oBAAsBsB,QAAQI,KAAK,SAASC,wBACvC3B,EAAE,2BAA6BsB,QAAQI,KAAK,SAASC,SAYzEC,QAAU3B,KAAK4B,KAAKN,SAEpBO,aAAe5B,IAAI6B,WAAW,cAAe,iBAC7CC,aAAe7B,aAAa8B,OAAO,CAACC,KAAM/B,aAAagC,MAAMC,SACjEpC,EAAEqC,KAAKT,QAAQ,GAAIE,aAAcE,cAAcM,MAAK,SAASC,uBAAwBC,MAAOC,cACxFA,MAAMC,SAASF,OACfC,MAAME,QAAQJ,uBAAuBK,YAErCH,MAAMI,OACCJ,SACRK,MAAM1C,aAAa2C,eAImB,MAQrC,kBACG,IAAI1C"}