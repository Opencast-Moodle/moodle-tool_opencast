{"version":3,"file":"maintenance.min.js","sources":["../src/maintenance.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to handle maintenance mode in tool opencast.\n *\n * @module     tool_opencast/maintenance\n * @copyright  2024 Farbod Zamani Boroujeni (zamani@elan-ev.de)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Ajax from 'core/ajax';\nimport * as Notification from 'core/notification';\nimport * as Str from 'core/str';\nimport * as Toast from 'core/toast';\n\n/**\n * Initializes the tool maintenance js module.\n */\nexport const init = () => {\n    // Load strings\n    var strings = [\n        {key: 'maintenancemode_modal_sync_confirmation_title', component: 'tool_opencast'},\n        {key: 'maintenancemode_modal_sync_confirmation_text', component: 'tool_opencast'},\n        {key: 'maintenancemode_modal_sync_confirmation_btn', component: 'tool_opencast'},\n        {key: 'maintenancemode_modal_sync_error_title', component: 'tool_opencast'},\n        {key: 'maintenancemode_modal_sync_error_noinstance_message', component: 'tool_opencast'},\n        {key: 'maintenancemode_modal_sync_failed', component: 'tool_opencast'},\n        {key: 'maintenancemode_modal_sync_succeeded', component: 'tool_opencast'},\n    ];\n    Str.get_strings(strings).then(function(jsstrings) {\n        // Required functionality for admin_setting_configdatetimeselector.\n        const datetimeselectors = document.querySelectorAll('.form-setting .opencast_config_dt_selector');\n        datetimeselectors.forEach((dtblock) => {\n            if (dtblock?.dataset?.isoptional) {\n                const enablingelement = document.getElementById(`${dtblock.dataset.settingid}_enabled`);\n                const initialvalue = enablingelement?.checked ?? false;\n                const selects = dtblock.querySelectorAll(`.opencast-config-dt-select`);\n                selects.forEach((select) => {\n                    select.disabled = !initialvalue;\n                });\n                enablingelement.addEventListener('change', (event) => {\n                    selects.forEach((select) => {\n                        select.disabled = !event.target.checked;\n                    });\n                });\n            }\n        });\n\n        // Sync Button.\n        const syncbtns = document.querySelectorAll('.maintenance-sync-btn');\n        syncbtns.forEach((btn) => {\n            btn.addEventListener('click', (e) => {\n                e.preventDefault();\n                const ocinstanceid = e.target?.dataset?.ocinstanceid;\n                if (!ocinstanceid) {\n                    Notification.alert(jsstrings[3], jsstrings[4]);\n                    return;\n                }\n\n                Notification.confirm(\n                    jsstrings[0], jsstrings[1], jsstrings[2], null,\n                    () => performSync(ocinstanceid, jsstrings)\n                );\n            });\n            // Make the button accessible to use after the listener is added.\n            btn.removeAttribute('disabled');\n            btn.removeAttribute('title');\n            btn.classList.remove('disabled');\n            btn.classList.remove('btn-warning');\n            btn.classList.add('btn-primary');\n        });\n\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Perform sync request via Ajax call.\n * @param {int} ocinstanceid\n * @param {array} jsstrings\n */\nconst performSync = (ocinstanceid, jsstrings) => {\n    if (!ocinstanceid) {\n        return;\n    }\n    Ajax.call([{\n        methodname: 'tool_opencast_maintenance_sync',\n        args: {ocinstanceid: ocinstanceid},\n    }])[0]\n    .then((data) => {\n        if (!data?.status) {\n            Toast.add(jsstrings[5], {type: 'danger'});\n            return;\n        }\n        Toast.add(jsstrings[6], {type: 'success'});\n        reloadWithDelay();\n        return;\n    })\n    .catch((error) => Notification.exception(error));\n};\n\n/**\n * Reloads the current page with a delay.\n * @param {int} delay default 3000 ms\n */\nconst reloadWithDelay = (delay = 3000) => {\n    setTimeout(() => {\n        window.location.reload();\n    }, delay);\n};\n\n/**\n * Opencast Tool maintenance notification handler.\n *\n * It is used to make sure that there is only one maintenance notification printed at a time.\n *\n * @param {string} message\n * @param {string} level\n * @param {bool} notify\n */\nexport const notification = (message, level, notify) => {\n    if (!window?.ocMaintenanceNotified && notify) {\n        Notification.addNotification({\n            message: message,\n            type: level\n        });\n        window.ocMaintenanceNotified = true;\n    }\n};\n"],"names":["Str","get_strings","key","component","then","jsstrings","document","querySelectorAll","forEach","dtblock","dataset","_dtblock$dataset","isoptional","enablingelement","getElementById","settingid","initialvalue","checked","selects","select","disabled","addEventListener","event","target","btn","e","preventDefault","ocinstanceid","_e$target","_e$target$dataset","Notification","confirm","performSync","alert","removeAttribute","classList","remove","add","catch","exception","Ajax","call","methodname","args","data","status","Toast","type","reloadWithDelay","error","delay","setTimeout","window","location","reload","message","level","notify","_window","ocMaintenanceNotified","addNotification"],"mappings":";;;;;;;kRA+BoB,KAWhBA,IAAIC,YATU,CACV,CAACC,IAAK,gDAAiDC,UAAW,iBAClE,CAACD,IAAK,+CAAgDC,UAAW,iBACjE,CAACD,IAAK,8CAA+CC,UAAW,iBAChE,CAACD,IAAK,yCAA0CC,UAAW,iBAC3D,CAACD,IAAK,sDAAuDC,UAAW,iBACxE,CAACD,IAAK,oCAAqCC,UAAW,iBACtD,CAACD,IAAK,uCAAwCC,UAAW,mBAEpCC,MAAK,SAASC,WAETC,SAASC,iBAAiB,8CAClCC,SAASC,kCACnBA,MAAAA,kCAAAA,QAASC,qCAATC,iBAAkBC,WAAY,iCACxBC,gBAAkBP,SAASQ,yBAAkBL,QAAQC,QAAQK,uBAC7DC,2CAAeH,MAAAA,uBAAAA,gBAAiBI,gEAChCC,QAAUT,QAAQF,+CACxBW,QAAQV,SAASW,SACbA,OAAOC,UAAYJ,gBAEvBH,gBAAgBQ,iBAAiB,UAAWC,QACxCJ,QAAQV,SAASW,SACbA,OAAOC,UAAYE,MAAMC,OAAON,kBAO/BX,SAASC,iBAAiB,yBAClCC,SAASgB,MACdA,IAAIH,iBAAiB,SAAUI,oCAC3BA,EAAEC,uBACIC,+BAAeF,EAAEF,uDAAFK,UAAUlB,4CAAVmB,kBAAmBF,aACnCA,aAKLG,aAAaC,QACT1B,UAAU,GAAIA,UAAU,GAAIA,UAAU,GAAI,MAC1C,IAAM2B,YAAYL,aAActB,aANhCyB,aAAaG,MAAM5B,UAAU,GAAIA,UAAU,OAUnDmB,IAAIU,gBAAgB,YACpBV,IAAIU,gBAAgB,SACpBV,IAAIW,UAAUC,OAAO,YACrBZ,IAAIW,UAAUC,OAAO,eACrBZ,IAAIW,UAAUE,IAAI,qBAIvBC,MAAMR,aAAaS,kBAQpBP,YAAc,CAACL,aAActB,aAC1BsB,cAGLa,KAAKC,KAAK,CAAC,CACPC,WAAY,iCACZC,KAAM,CAAChB,aAAcA,iBACrB,GACHvB,MAAMwC,OACEA,MAAAA,MAAAA,KAAMC,QAIXC,MAAMT,IAAIhC,UAAU,GAAI,CAAC0C,KAAM,YAC/BC,mBAJIF,MAAMT,IAAIhC,UAAU,GAAI,CAAC0C,KAAM,cAOtCT,OAAOW,OAAUnB,aAAaS,UAAUU,UAOvCD,gBAAkB,eAACE,6DAAQ,IAC7BC,YAAW,KACPC,OAAOC,SAASC,WACjBJ,8BAYqB,CAACK,QAASC,MAAOC,sCACpCL,2BAAAM,QAAQC,wBAAyBF,SAClC3B,aAAa8B,gBAAgB,CACzBL,QAASA,QACTR,KAAMS,QAEVJ,OAAOO,uBAAwB"}